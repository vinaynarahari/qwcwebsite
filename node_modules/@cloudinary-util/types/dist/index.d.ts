type CloudinaryResourceAccessMode = "public" | "authenticated" | (string & {});
type CloudinaryResourceResourceType = "image" | "video" | "raw" | "auto";
type CloudinaryResourceType = "upload" | "private" | "authenticated";
interface CloudinaryResource {
    access_control: Array<string>;
    access_mode: CloudinaryResourceAccessMode;
    asset_id: string;
    bytes: number;
    context: Record<string, Record<string, string>>;
    colors?: [string, number][];
    created_at: string;
    display_name: string;
    folder: string;
    format: string;
    height: number;
    info: Record<string, unknown>;
    metadata: Record<string, Record<string, string>>;
    moderation: Array<string>;
    public_id: string;
    resource_type: CloudinaryResourceResourceType;
    secure_url: string;
    signature: string;
    tags: Array<string>;
    type: CloudinaryResourceType;
    url: string;
    version: number;
    width: number;
    [key: string]: unknown;
}

type CustomURL = `https://${string}.${string}`;
interface CloudinaryUploadWidgetOptions {
    apiKey?: string;
    cloudName?: string;
    uploadPreset?: string;
    encryption?: {
        key: string;
        iv: string;
    };
    defaultSource?: string;
    maxFiles?: number;
    multiple?: boolean;
    sources?: Array<"camera" | "dropbox" | "facebook" | "gettyimages" | "google_drive" | "image_search" | "instagram" | "istock" | "local" | "shutterstock" | "unsplash" | "url">;
    cropping?: boolean;
    croppingAspectRatio?: number;
    croppingCoordinatesMode?: string;
    croppingDefaultSelectionRatio?: number;
    croppingShowBackButton?: boolean;
    croppingShowDimensions?: boolean;
    showSkipCropButton?: boolean;
    dropboxAppKey?: string;
    facebookAppId?: string;
    googleApiKey?: string;
    googleDriveClientId?: string;
    instagramClientId?: string;
    searchByRights?: boolean;
    searchBySites?: Array<string>;
    context?: object;
    folder?: string;
    publicId?: string;
    resourceType?: string;
    tags?: Array<string>;
    uploadSignature?: string | Function;
    uploadSignatureTimestamp?: number;
    clientAllowedFormats?: Array<string>;
    croppingValidateDimensions?: boolean;
    maxChunkSize?: number;
    maxImageFileSize?: number;
    maxImageHeight?: number;
    maxImageWidth?: number;
    maxFileSize?: number;
    maxRawFileSize?: number;
    maxVideoFileSize?: number;
    minImageHeight?: number;
    minImageWidth?: number;
    validateMaxWidthHeight?: boolean;
    fieldName?: string;
    form?: string;
    thumbnails?: string;
    thumbnailTransformation?: string | Array<object>;
    buttonCaption?: string;
    buttonClass?: string;
    text?: object;
    theme?: string;
    styles?: object;
    autoMinimize?: boolean;
    detection?: string;
    getTags?: Function;
    getUploadPresets?: Function;
    inlineContainer?: any;
    language?: string;
    on_success?: string;
    preBatch?: Function;
    prepareUploadParams?: Function;
    queueViewPosition?: string;
    showAdvancedOptions?: boolean;
    showCompletedButton?: boolean;
    showInsecurePreview?: boolean;
    showPoweredBy?: boolean;
    showUploadMoreButton?: boolean;
    singleUploadAutoClose?: boolean;
}
interface CloudinaryUploadWidgetResults {
    event?: string;
    info?: string | CloudinaryUploadWidgetInfo;
}
interface CloudinaryUploadWidgetInfo extends CloudinaryResource {
    api_key: string;
    batchId: string;
    etag: string;
    hook_execution: Record<string, unknown>;
    id: string;
    original_filename: string;
    pages: number;
    path: string;
    placeholder: boolean;
    thumbnail_url: string;
}
interface CloudinaryUploadWidgetInstanceMethods {
    close: (options?: CloudinaryUploadWidgetInstanceMethodCloseOptions) => void;
    destroy: (options?: CloudinaryUploadWidgetInstanceMethodDestroyOptions) => Promise<void>;
    hide: () => void;
    isDestroyed: () => boolean;
    isMinimized: () => boolean;
    isShowing: () => boolean;
    minimize: () => void;
    open: (widgetSource?: CloudinaryUploadWidgetSources, options?: CloudinaryUploadWidgetInstanceMethodOpenOptions) => void;
    show: () => void;
    update: (options: CloudinaryUploadWidgetInstanceMethodUpdateOptions) => void;
}
type CloudinaryUploadWidgetInstanceMethodCloseOptions = {
    quiet: boolean;
};
type CloudinaryUploadWidgetInstanceMethodDestroyOptions = {
    removeThumbnails: boolean;
};
type CloudinaryUploadWidgetInstanceMethodOpenOptions = {
    files: CustomURL[];
};
type CloudinaryUploadWidgetInstanceMethodUpdateOptions = Omit<CloudinaryUploadWidgetOptions, "secure" | "uploadSignature" | "getTags" | "preBatch" | "inlineContainer" | "fieldName"> & {
    cloudName: string;
    uploadPreset: string;
};
type CloudinaryUploadWidgetSources = "local" | "url" | "camera" | "image_search" | "google_drive" | "dropbox" | "facebook" | "instagram" | "shutterstock" | "getty" | "istock" | "unsplash" | null;
type CloudinaryUploadWidgetError = {
    status: string;
    statusText: string;
} | string | null;
/**
 * A Cloudinary Upload Widget instance.
 * @see https://cloudinary.com/documentation/upload_widget
 */
type CloudinaryUploadWidget = CloudinaryUploadWidgetInstanceMethods;
/**
 * This type represents the `window.cloudinary.createUploadWidget` function.
 * @see https://cloudinary.com/documentation/upload_widget#how_to_set_up_and_integrate_the_upload_widget_into_your_site_or_app
 */
type CloudinaryCreateUploadWidget = (options: CloudinaryUploadWidgetOptions, callback: (error: CloudinaryUploadWidgetError | null, results: CloudinaryUploadWidgetResults) => void) => CloudinaryUploadWidget;

interface CloudinaryVideoPlayer {
    on: Function;
}
interface CloudinaryVideoPlayerOptionsLogo {
    logoImageUrl?: string;
    logoOnclickUrl?: string;
    showLogo?: boolean;
}
interface CloudinaryVideoPlayerOptions extends CloudinaryVideoPlayerOptionsLogo {
    width?: string | number;
    height?: string | number;
    aspectRatio?: string;
    aiHighlightsGraph?: boolean;
    bigPlayButton?: boolean | string;
    colors?: CloudinaryVideoPlayerOptionsColors;
    /**
     * @deprecated use top level options instead
     */
    controlBar?: {
        /**
         * @deprecated use {@link `pictureInPictureToggle`} instead
         */
        pictureInPictureToggle?: boolean;
    };
    controls?: boolean;
    floatingWhenNotVisible?: string;
    fluid?: boolean;
    fontFace?: string;
    hideContextMenu?: boolean;
    interactionAreas?: unknown;
    playbackRates?: Array<unknown>;
    playlistWidget?: {
        direction?: string;
        total?: string;
    };
    posterOptions?: CloudinaryVideoPlayerOptionPosterOptions;
    showJumpControls?: boolean;
    seekThumbnails?: boolean;
    videoJS?: object;
    autoPlay?: string | boolean | undefined;
    autoplay?: string | boolean | undefined;
    autoplayMode?: string;
    autoShowRecommendations?: boolean;
    loop?: boolean;
    maxTries?: number;
    muted?: boolean;
    pictureInPictureToggle?: boolean;
    playedEventPercents?: number[];
    playedEventTimes?: null | Array<unknown>;
    playsinline?: boolean;
    videoTimeout?: number;
    withCredentials?: boolean;
    chapters?: object;
    chaptersButton?: boolean;
    preload?: string;
    publicId: string;
    sourceTransformation?: object;
    sourceTypes?: Array<string>;
    transformation?: Array<object> | object;
    ads?: {
        adTagUrl?: string;
        adsInPlaylist?: string;
        showCountdown?: boolean;
        adLabel?: string;
        locale?: string;
        prerollTimeout?: number;
        postrollTimeout?: number;
    };
    analytics?: boolean;
    allowUsageReport?: boolean;
    cloud_name?: string;
    cname?: string;
    privateCdn?: boolean;
    queryParams?: Record<string, string | number | boolean> | string;
    secure?: boolean;
    secureDistribution?: string;
    language?: string;
    languages?: Record<string, object>;
}
interface CloudinaryVideoPlayerOptionsColors {
    accent?: string;
    base?: string;
    text?: string;
}
interface CloudinaryVideoPlayerOptionPosterOptions {
    publicId: string;
}

interface CloudinaryAssetConfigurationAuthToken {
    token_name: string;
    duration: string;
    start_time: string;
    expiration: string;
    ip: string;
    acl: string;
    url: string;
    key: string;
}
interface CloudinaryAssetConfigurationUrl {
    cname?: string;
    secureDistribution?: string;
    privateCdn?: boolean;
    secure?: boolean;
    analytics?: boolean;
    signUrl?: boolean;
    longUrlSignature?: boolean;
    shorten?: boolean;
    useRootPath?: boolean;
    forceVersion?: boolean;
    queryParams?: Record<string, string | number | boolean> | string;
}
interface CloudinaryAssetConfigurationCloud {
    cloudName?: string;
    apiKey?: string;
    apiSecret?: string;
    authToken?: CloudinaryAssetConfigurationAuthToken;
}
interface CloudinaryAssetConfiguration {
    cloud?: CloudinaryAssetConfigurationCloud;
    url?: CloudinaryAssetConfigurationUrl;
}

export type { CloudinaryAssetConfiguration, CloudinaryAssetConfigurationAuthToken, CloudinaryAssetConfigurationCloud, CloudinaryAssetConfigurationUrl, CloudinaryCreateUploadWidget, CloudinaryResource, CloudinaryResourceAccessMode, CloudinaryResourceResourceType, CloudinaryResourceType, CloudinaryUploadWidget, CloudinaryUploadWidgetError, CloudinaryUploadWidgetInfo, CloudinaryUploadWidgetInstanceMethodCloseOptions, CloudinaryUploadWidgetInstanceMethodDestroyOptions, CloudinaryUploadWidgetInstanceMethodOpenOptions, CloudinaryUploadWidgetInstanceMethodUpdateOptions, CloudinaryUploadWidgetInstanceMethods, CloudinaryUploadWidgetOptions, CloudinaryUploadWidgetResults, CloudinaryUploadWidgetSources, CloudinaryVideoPlayer, CloudinaryVideoPlayerOptionPosterOptions, CloudinaryVideoPlayerOptions, CloudinaryVideoPlayerOptionsColors, CloudinaryVideoPlayerOptionsLogo };
